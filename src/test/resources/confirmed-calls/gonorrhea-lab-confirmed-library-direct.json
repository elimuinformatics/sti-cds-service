{
  "resourceType": "Library",
  "id": "GonorrheaLabConfirmedCDS",
  "meta": {
    "versionId": "54",
    "lastUpdated": "2024-02-28T00:46:22.645+00:00",
    "source": "#mTsaSQgBbLqH601k",
    "tag": [ {
      "system": "http://terminology.hl7.org/CodeSystem/v3-ObservationValue",
      "code": "SUBSETTED",
      "display": "Resource encoded in summary mode"
    } ]
  },
  "version": "0.0.1",
  "name": "GonorrheaLabConfirmedCDS",
  "type": {
    "coding": [ {
      "code": "logic-library"
    } ]
  },
  "content": [ {
    "contentType": "text/cql",
    "data": ""
  } ]
}

