{
    "resourceType": "Library",
    "id": "GonorrheaTxCDS",
    "meta": {
        "versionId": "60",
        "lastUpdated": "2024-02-28T00:44:10.429+00:00",
        "source": "#7j2Sfo2UpgauBvKV",
        "tag": [
            {
                "system": "http://terminology.hl7.org/CodeSystem/v3-ObservationValue",
                "code": "SUBSETTED",
                "display": "Resource encoded in summary mode"
            }
        ]
    },
    "version": "0.0.1",
    "name": "GonorrheaTxCDS",
    "type": {
        "coding": [
            {
                "code": "logic-library"
            }
        ]
    },
    "content": [
        {
            "contentType": "text/cql",
            "data": ""
        }
    ]
}
